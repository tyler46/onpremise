# NOTE: This docker-compose.yml is meant to be just an example of how
# you could accomplish this on your own. It is not intended to work in
# all use-cases and must be adapted to fit your needs. This is merely
# a guideline.

# See docs.getsentry.com/on-premise/server/ for full
# instructions

version: '3.4'

x-defaults: &defaults
  restart: unless-stopped
  build: .
  depends_on:
    - redis
    - postgres
    - memcached
    - smtp
  env_file: .env
  environment:
    SENTRY_MEMCACHED_HOST: memcached
    SENTRY_REDIS_HOST: redis
    SENTRY_POSTGRES_HOST: postgres
    SENTRY_EMAIL_HOST: smtp
  volumes:
    - sentry-data:/var/lib/sentry/files
  networks:
    - main-tier


services:
  smtp:
    restart: unless-stopped
    image: tianon/exim4
    restart: always
    networks:
      - main-tier

  memcached:
    restart: unless-stopped
    image: memcached:1.5-alpine
    networks:
      - main-tier

  redis:
    restart: unless-stopped
    image: redis:3.2-alpine
    restart: always
    networks:
      - main-tier

  postgres:
    restart: unless-stopped
    image: postgres:9.5
    restart: always
    volumes:
      - sentry-postgres:/var/lib/postgresql/data
    networks:
      - main-tier

  web:
    <<: *defaults
    ports:
      - '9000:9000'

  cron:
    <<: *defaults
    command: run cron

  worker:
    <<: *defaults
    command: run worker

  proxy:
    build: nginx
    restart: unless-stopped
    depends_on:
      - web
    ports:
      - "${NGINX_PUBLIC_PORT}:80"
      - "${NGINX_PUBLIC_SSL_PORT}:443"
    networks:
      - main-tier


volumes:
    sentry-data:
      external: true
      name: "${SENTRY_VOLUME}"
    sentry-postgres:
      external: true
      name: "${DB_VOLUME}"

networks:
  main-tier:
    external:
      name: "${NETWORK_NAME}"
